## My functions, makeCacheMatrix and cacheSolve, allow for the simplification of the time
## consuming process of repeatedly computing the inverse of a matrix. The lexical scoping
## rules of the R language will be manipulated to cache the inverse of a matrix so that
## it can be called from the cache when needed rather than recomputed over again. 

## makeCache matrix will create a "matrix" object that can cache its inverse by containing
## a function that will:
##      1. set the value of the matrix
##      2. get the value of the matrix
##      3. set the value of the inverse of the matrix
##      4. get the value of the inverse of the matrix

makeCacheMatrix <- function(x = matrix()) {
        cache<-NULL
        setMatrix<-function(y){
                x<<-y
                cache<<-NULL
        }
        getMatrix<-function()x
        setInverse<-function(inverse)cache<<-inverse 
        getInverse<-function()cache
        list(setMatrix=setMatrix, getMatrix=getMatrix, setInverse=setInverse, getInverse=getInverse)
}

## cacheSolve will return the inverse of the matrix. If it checks and finds that the 
## inverse has already been computed, it gets the result and skips the computation. If not,
## it computes the inverse and sets the value of the matrix through the setInverse function.

cacheSolve <- function(x, ...) {
        cache<-x$getInverse()
        if(!is.null(cache)){
                message("getting cached data")
                return(cache)
        }
        matrix<-x$getMatrix()
        cache<-solve(matrix)
        x$setInverse(cache)
        return(cache)
}
